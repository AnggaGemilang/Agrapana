power on/off
tambah tanaman
plantlist
preset

===================================================

image

{
  "imgURL": "https://firebasestorage.googleapis.com/v0/b/arceniter-app.appspot.com/o/thumbnail_preset%2F71007f24-a43c-4f13-9d63-262a6a09e055.png?alt=media&token=381099f5-1ecf-41c9-a863-f95540a4981d",
  "refresh": "20"
}a

===================================================

common

{
  "power": "on",
  "is_planting": "yes",
  "plant_name": "spinach",
  "category": "microgreen",
  "started_planting": "20-07-2022, 10:00"
} 

===================================================

monitoring

{
  "temperature": "120",
  "ph": "120",
  "gas": "120",
  "growth_lamp": "off",
  "nutrition": "120",
  "nutrition_volume": "120",


  "number_of_leaves": [
   {
     "20-08-2022": "10"
   },
   {
     "21-08-2022": "14"
   },
   {
     "22-08-2022": "17"
   }
  ]
}

===================================================

controlling

{
  "temperature": "27",
  "co2_valve": "open",
  "pump": "on",
  "nutrition": "27",
  "mode": "seedling"
}


    doc2["temperature"] = (strcmp(is_planting, "no") == 0) ? "N/A" : msg;
    doc2["ph"] = (strcmp(is_planting, "no") == 0) ? "N/A" : msg;
    doc2["gas"] = (strcmp(is_planting, "no") == 0) ? "N/A" : msg;
    doc2["nutrition"] = (strcmp(is_planting, "no") == 0) ? "N/A" : msg;
    doc2["nutrition_volume"] = (strcmp(is_planting, "no") == 0) ? "N/A" : msg;
    doc2["growth_lamp"] = "on";

====================================================

else if (topic == "arceniter/controlling"){

    StaticJsonDocument<256> doc;
    deserializeJson(doc, payload, length);

    JsonObject common = doc["common"];    
    strlcpy(power, common["power"], sizeof(power));
    strlcpy(is_planting, common["is_planting"] | "", sizeof(is_planting));  

    JsonObject configuration = doc["configuration"];    
    strlcpy(temperatureConfiguration, configuration["temperature"] | "", sizeof(temperatureConfiguration));
    strlcpy(growth_lamp, configuration["growth_lamp"] | "", sizeof(growth_lamp));
    strlcpy(co2_valve, configuration["co2_valve"] | "", sizeof(co2_valve));  
    strlcpy(pump, configuration["pump"] | "", sizeof(pump));
    strlcpy(nutritionConfiguration, configuration["nutrition"] | "", sizeof(nutritionConfiguration));
    strlcpy(mode, configuration["mode"] | "", sizeof(mode));
    
  }


=====================================================

    Serial.print("Message arrived [");
    Serial.print(topic);
    Serial.print("] ");  
    Serial.println(power);

=====================================================


#include <PubSubClient.h>
#include <ArduinoJson.h>
#include <ESP8266WiFi.h>

#define MSG_BUFFER_SIZE (50)
#define LEDPin D1
#define LightSensorPin A0
#define ssid "SPEEDY"
#define password "suherman"

//#define mqtt_broker "broker.emqx.io"
//#define mqtt_username "emqx"
//#define mqtt_password "public"
//#define mqtt_port 1883

#define mqtt_broker "e18cd11e.us-east-1.emqx.cloud"
#define mqtt_username "AnggaGemilang"
#define mqtt_password "4ngg4Gem!l4ng"
#define mqtt_port 15089

WiFiClient wifiClient;
PubSubClient mqttClient(wifiClient);

unsigned long lastMsg = 0;
char msg[MSG_BUFFER_SIZE];
int value = 0;

// common
char power[4] = "";
char is_planting[4] = "";
char plant_name[25] = "";
char started_planting[25] = "";

// configuration
char temperatureConfiguration[10] = "";
char growth_lamp[4] = "";
char co2_valve[8] = "";
char pump[8] = "";
char nutritionConfiguration[10] = "";
char mode[10] = "";

// monitoring
char temperatureMonitoring[10] = "";
char ph[5] = "";
char gas[5] = "";
char nutritionMonitoring[10] = "";
char nutritionVolume[10] = "";

char output1[300];
char output2[500];

void callback(char *topic, byte *payload, unsigned int length) {

  if(strcmp(topic, "arceniter/controlling") == 0){
    Serial.print("Message arrived [");
    Serial.print(topic);
    Serial.print("] ");
    
    StaticJsonDocument<512> doc;
    deserializeJson(doc, payload, length);

    strlcpy(power, doc["common"]["power"] | "", sizeof(power));
    strlcpy(is_planting, doc["common"]["is_planting"] | "", sizeof(is_planting));
//    strlcpy(plant_name, common["plant_name"] | "", sizeof(plant_name));
//    strlcpy(started_planting, common["started_planting"] | "", sizeof(started_planting));

    Serial.println(power);

//    JsonObject monitoring = doc["monitoring"];      
//    strlcpy(temperatureMonitoring, monitoring["temperature"] | "", sizeof(temperatureMonitoring));
//    strlcpy(ph, monitoring["ph"] | "", sizeof(ph));
//    strlcpy(gas, monitoring["gas"] | "", sizeof(gas));  
//    strlcpy(nutritionMonitoring, monitoring["nutrition"] | "", sizeof(nutritionMonitoring));
//    strlcpy(nutritionVolume, monitoring["nutrition_volume"] | "", sizeof(nutritionVolume)); 
  }
  
  if (strcmp(power, "on") == 0) {
    digitalWrite(LEDPin, HIGH);
  } 
  if (strcmp(power, "off") == 0) {
    digitalWrite(LEDPin, LOW);
  }
}

void setup() {
  Serial.begin(9600);
  WiFi.begin(ssid, password);
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.println("Connecting to WiFi..");
  }
  Serial.println("Connected to the WiFi network!");

  pinMode(LEDPin, OUTPUT);
  pinMode(LightSensorPin, INPUT);

  mqttClient.setServer(mqtt_broker, mqtt_port);
  mqttClient.setCallback(callback);
  while (!mqttClient.connected()) {
    String client_id = String(WiFi.macAddress());
 
    if (mqttClient.connect(client_id.c_str(), mqtt_username, mqtt_password)) {
      Serial.println("Connected to Public MQTT Broker");
    } else {
      Serial.print("Failed to connect with MQTT Broker");
      Serial.print(mqttClient.state());
      delay(2000);
    }
  }
  mqttClient.subscribe("arceniter/monitoring");
  mqttClient.subscribe("arceniter/controlling");
}

void reconnect() {
  while (!mqttClient.connected()) {
    Serial.print("Attempting MQTT connection...");
    String client_id = String(WiFi.macAddress());
    if (mqttClient.connect(client_id.c_str(), mqtt_username, mqtt_password)) {
      Serial.println("Connected to Public MQTT Broker");
    } else {
      Serial.print("Failed to connect with MQTT Broker");
      Serial.print(mqttClient.state());
      delay(2000);
    }
  }
  mqttClient.subscribe("arceniter/monitoring");
  mqttClient.subscribe("arceniter/controlling");
}

void loop() {
  if (!mqttClient.connected()) {
    reconnect();
  }
  mqttClient.loop();

  int lightData = analogRead(LightSensorPin);

  snprintf (msg, MSG_BUFFER_SIZE, "%ld", lightData);

  StaticJsonDocument<228> doc1;

  doc1["common"]["power"] = power;
  doc1["common"]["is_planting"] = is_planting;

//  doc1["configuration"]["temperature"] = temperatureConfiguration;
//  doc1["configuration"]["growth_lamp"] = growth_lamp;
//  doc1["configuration"]["co2_valve"] = co2_valve;
//  doc1["configuration"]["pump"] = pump;
//  doc1["configuration"]["nutrition"] = nutritionConfiguration;
//  doc1["configuration"]["mode"] = mode;
   
  serializeJson(doc1, output1); 
       
  Serial.print("Publish message: ");
  Serial.println(output1);
  mqttClient.publish("arceniter/controlling", output1);

//  StaticJsonDocument<256> doc2;

//  doc2["common"]["power"] = power;
//  doc2["common"]["is_planting"] = is_planting;
//  doc2["common"]["plant_name"] = plant_name;
//  doc2["common"]["started_planting"] = started_planting;
//  
//  doc2["monitoring"]["temperature"] = temperatureMonitoring;
//  doc2["monitoring"]["ph"] = ph;
//  doc2["monitoring"]["gas"] = gas;
//  doc2["monitoring"]["growth_lamp"] = growth_lamp;
//  doc2["monitoring"]["nutrition"] = nutritionMonitoring;
//  doc2["monitoring"]["nutrition_volume"] = nutritionVolume;
//   
//  serializeJson(doc2, output2); 
       
//  Serial.print("Publish message: ");
//  Serial.println(output2);
//  mqttClient.publish("arceniter/monitoring", output2);
   
  delay(3000);

}

